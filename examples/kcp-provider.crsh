# object kinds to capture
kinds = [
"workspaces",
"configmap"
]

def configure_work_dir(context):
    work_dir = args.workdir if hasattr(args, "workdir") else fail("Error: workdir argument is required but not provided.")
    context_dir = work_dir + "/" + context
    conf = crashd_config(workdir=context_dir)

def capture_kcp_objects():
    # configure a tunnel to the pods
    tunnel_config=kube_port_forward_config(namespace="default", service="ucp-api-testorg", target_port=6443)

    # fetch all the workspaces in the KCP instance as contexts
    kcp_provider_result = kcp_provider(
        kcp_admin_secret_namespace="default",
        kcp_admin_secret_name="ucp-core-controllers-testorg-admin-kubeconfig",
        kcp_cert_secret_name="ucp-core-controllers-testorg-admin-cert",
        tunnel_config=tunnel_config
    )

    # capture kubernetes objects from all kcp workspaces
    for context in kcp_provider_result.contexts:
        print("Capturing kcp objects for", context)

        # set kubeconfig path and context in threadlocal
        set_defaults(kube_config(capi_provider=kcp_provider_result, cluster_context=context))

        # configure work directory based on context name - context-name should use "/"
        configure_work_dir(context)

        # capture objects
        kube_capture(what="objects", kinds=kinds, namespaces=["default"], output_format="yaml", tunnel_config=tunnel_config)

def main():
    capture_kcp_objects()

main()
