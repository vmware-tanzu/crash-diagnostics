## @copyright Copyright Broadcom. All Rights Reserved.
## The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
## @license For licensing, see LICENSE.md.

# object kinds to capture
kinds = [
"space",
"configmap"
]

def configure_work_dir(context):
    work_dir = args.workdir if hasattr(args, "workdir") else fail("Error: workdir argument is required but not provided.")
    context_dir = work_dir + "/" + context
    conf = crashd_config(workdir=context_dir)

def capture_kcp_objects():
    kcp_provider_result = kcp_provider(
        kcp_admin_secret_namespace="",
        kcp_admin_secret_name=""
    )

    # capture kubernetes objects from all kcp workspaces
    for context in kcp_provider_result.contexts:
        print("Capturing kcp objects for", context)

        # set kubeconfig path and context in threadlocal
        set_defaults(kube_config(capi_provider=kcp_provider_result, cluster_context=context))

        # configure work directory based on context name - context-name should use "/"
        configure_work_dir(context)
        kube_capture(what="objects", kinds=kinds, namespaces=["default"])

def main():
    capture_kcp_objects()

main()
